const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Faltan variables de entorno SUPABASE');
  console.log('Necesitas:');
  console.log('- NEXT_PUBLIC_SUPABASE_URL');
  console.log('- SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

// Cliente con service role para aplicar pol√≠ticas
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function applyRLSPolicies() {
  console.log('üîß Aplicando pol√≠ticas RLS para online_users...');
  
  try {
    // 1. Eliminar pol√≠ticas existentes
    console.log('\n1Ô∏è‚É£ Eliminando pol√≠ticas existentes...');
    
    const dropPolicies = [
      'DROP POLICY IF EXISTS "Users can view all online users" ON online_users;',
      'DROP POLICY IF EXISTS "Users can update their own online status" ON online_users;',
      'DROP POLICY IF EXISTS "Users can insert their own online status" ON online_users;',
      'DROP POLICY IF EXISTS "Users can delete their own online status" ON online_users;',
      'DROP POLICY IF EXISTS "Allow authenticated users to view online users" ON online_users;',
      'DROP POLICY IF EXISTS "Allow authenticated users to insert their own status" ON online_users;',
      'DROP POLICY IF EXISTS "Allow authenticated users to update their own status" ON online_users;',
      'DROP POLICY IF EXISTS "Allow users to delete their own status" ON online_users;',
      'DROP POLICY IF EXISTS "Allow service role to delete inactive users" ON online_users;'
    ];
    
    for (const sql of dropPolicies) {
      try {
        const { error } = await supabase.rpc('exec_sql', { query: sql });
        if (error && !error.message.includes('does not exist')) {
          console.log(`‚ö†Ô∏è  Error eliminando pol√≠tica: ${error.message}`);
        }
      } catch (e) {
        // Ignorar errores de pol√≠ticas que no existen
      }
    }
    
    console.log('‚úÖ Pol√≠ticas existentes eliminadas');
    
    // 2. Habilitar RLS
    console.log('\n2Ô∏è‚É£ Habilitando RLS...');
    
    const { error: rlsError } = await supabase.rpc('exec_sql', {
      query: 'ALTER TABLE online_users ENABLE ROW LEVEL SECURITY;'
    });
    
    if (rlsError) {
      console.log('‚ö†Ô∏è  Error habilitando RLS:', rlsError.message);
    } else {
      console.log('‚úÖ RLS habilitado');
    }
    
    // 3. Crear nuevas pol√≠ticas
    console.log('\n3Ô∏è‚É£ Creando nuevas pol√≠ticas...');
    
    const policies = [
      {
        name: 'SELECT Policy',
        sql: `CREATE POLICY "Allow authenticated users to view online users" ON online_users
          FOR SELECT 
          TO authenticated
          USING (true);`
      },
      {
        name: 'INSERT Policy',
        sql: `CREATE POLICY "Allow authenticated users to insert their own status" ON online_users
          FOR INSERT 
          TO authenticated
          WITH CHECK (auth.uid() = user_id);`
      },
      {
        name: 'UPDATE Policy',
        sql: `CREATE POLICY "Allow authenticated users to update their own status" ON online_users
          FOR UPDATE 
          TO authenticated
          USING (auth.uid() = user_id)
          WITH CHECK (auth.uid() = user_id);`
      },
      {
        name: 'DELETE Policy (Users)',
        sql: `CREATE POLICY "Allow users to delete their own status" ON online_users
          FOR DELETE 
          TO authenticated
          USING (auth.uid() = user_id);`
      },
      {
        name: 'DELETE Policy (Service Role)',
        sql: `CREATE POLICY "Allow service role to delete inactive users" ON online_users
          FOR DELETE 
          TO service_role
          USING (true);`
      }
    ];
    
    for (const policy of policies) {
      console.log(`   üìù Creando ${policy.name}...`);
      
      const { error } = await supabase.rpc('exec_sql', { query: policy.sql });
      
      if (error) {
        console.log(`   ‚ùå Error: ${error.message}`);
      } else {
        console.log(`   ‚úÖ ${policy.name} creada`);
      }
    }
    
    // 4. Verificar pol√≠ticas creadas
    console.log('\n4Ô∏è‚É£ Verificando pol√≠ticas creadas...');
    
    const { data: policies_check, error: checkError } = await supabase.rpc('exec_sql', {
      query: `SELECT policyname, cmd, roles FROM pg_policies WHERE tablename = 'online_users' ORDER BY policyname;`
    });
    
    if (checkError) {
      console.log('‚ö†Ô∏è  No se pudieron verificar las pol√≠ticas:', checkError.message);
    } else if (policies_check && policies_check.length > 0) {
      console.log('üìã Pol√≠ticas aplicadas:');
      policies_check.forEach((policy, index) => {
        console.log(`   ${index + 1}. ${policy.policyname} (${policy.cmd}) - ${policy.roles}`);
      });
    } else {
      console.log('‚ö†Ô∏è  No se encontraron pol√≠ticas');
    }
    
    // 5. Probar inserci√≥n
    console.log('\n5Ô∏è‚É£ Probando inserci√≥n con usuario autenticado...');
    
    // Crear un cliente con anon key para simular usuario autenticado
    const anonClient = createClient(supabaseUrl, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);
    
    // Intentar insertar con service role (deber√≠a funcionar)
    const testUserId = 'test-user-' + Date.now();
    const { error: insertError } = await supabase
      .from('online_users')
      .insert({
        user_id: testUserId,
        last_seen_at: new Date().toISOString()
      });
    
    if (insertError) {
      console.log('‚ùå Error en inserci√≥n de prueba:', insertError.message);
    } else {
      console.log('‚úÖ Inserci√≥n de prueba exitosa');
      
      // Limpiar
      await supabase
        .from('online_users')
        .delete()
        .eq('user_id', testUserId);
    }
    
    console.log('\n‚úÖ Aplicaci√≥n de pol√≠ticas RLS completada');
    console.log('\nüìã PR√ìXIMOS PASOS:');
    console.log('1. Reinicia tu aplicaci√≥n si est√° corriendo');
    console.log('2. Inicia sesi√≥n en la aplicaci√≥n');
    console.log('3. Verifica que los usuarios en l√≠nea aparezcan');
    console.log('4. Si sigue fallando, revisa los logs del servidor');
    
  } catch (error) {
    console.error('‚ùå Error general:', error);
    
    console.log('\nüîß SOLUCI√ìN ALTERNATIVA:');
    console.log('Si este script falla, ejecuta manualmente en Supabase Dashboard:');
    console.log('1. Ve a SQL Editor');
    console.log('2. Ejecuta el contenido completo de: sql/fix_online_users_rls_policies.sql');
  }
}

applyRLSPolicies();