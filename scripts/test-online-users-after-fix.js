const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Faltan variables de entorno SUPABASE');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testOnlineUsersAfterFix() {
  console.log('üß™ Probando funcionalidad de online_users despu√©s de la correcci√≥n RLS...');
  
  try {
    // 1. Verificar acceso a la tabla
    console.log('\n1Ô∏è‚É£ Verificando acceso a la tabla...');
    const { data: tableData, error: tableError } = await supabase
      .from('online_users')
      .select('count', { count: 'exact', head: true });
    
    if (tableError) {
      console.error('‚ùå Error al acceder a la tabla:', tableError);
      return;
    }
    
    console.log('‚úÖ Acceso a tabla confirmado');
    console.log(`üìä Registros actuales en la tabla: ${tableData?.length || 0}`);
    
    // 2. Verificar estructura de la tabla
    console.log('\n2Ô∏è‚É£ Verificando estructura de la tabla...');
    const { data: structureData, error: structureError } = await supabase
      .from('online_users')
      .select('*')
      .limit(1);
    
    if (structureError) {
      console.error('‚ùå Error al verificar estructura:', structureError);
    } else {
      console.log('‚úÖ Estructura de tabla verificada');
      if (structureData && structureData.length > 0) {
        console.log('üìã Columnas disponibles:', Object.keys(structureData[0]));
      }
    }
    
    // 3. Limpiar registros antiguos para la prueba
    console.log('\n3Ô∏è‚É£ Limpiando registros antiguos...');
    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();
    const { error: cleanupError } = await supabase
      .from('online_users')
      .delete()
      .lt('last_seen_at', fiveMinutesAgo);
    
    if (cleanupError) {
      console.log('‚ö†Ô∏è  Error en limpieza (puede ser normal):', cleanupError.message);
    } else {
      console.log('‚úÖ Limpieza completada');
    }
    
    // 4. Verificar usuarios actualmente en l√≠nea
    console.log('\n4Ô∏è‚É£ Verificando usuarios actualmente en l√≠nea...');
    const twoMinutesAgo = new Date(Date.now() - 2 * 60 * 1000).toISOString();
    const { data: activeUsers, error: activeError } = await supabase
      .from('online_users')
      .select('user_id, last_seen_at, created_at')
      .gte('last_seen_at', twoMinutesAgo)
      .order('last_seen_at', { ascending: false });
    
    if (activeError) {
      console.error('‚ùå Error al consultar usuarios activos:', activeError);
    } else {
      console.log(`‚úÖ Usuarios activos encontrados: ${activeUsers?.length || 0}`);
      if (activeUsers && activeUsers.length > 0) {
        activeUsers.forEach((user, index) => {
          console.log(`   ${index + 1}. User ID: ${user.user_id.substring(0, 8)}... (${user.last_seen_at})`);
        });
      }
    }
    
    // 5. Verificar pol√≠ticas RLS (indirectamente)
    console.log('\n5Ô∏è‚É£ Verificando pol√≠ticas RLS...');
    
    // Intentar una operaci√≥n que requiere pol√≠ticas correctas
    const testUserId = '12345678-1234-1234-1234-123456789012'; // UUID de prueba
    
    // Probar INSERT (deber√≠a fallar por FK constraint, no por RLS)
    const { error: insertError } = await supabase
      .from('online_users')
      .insert({
        user_id: testUserId,
        last_seen_at: new Date().toISOString()
      });
    
    if (insertError) {
      if (insertError.code === '23503') {
        console.log('‚úÖ Pol√≠ticas RLS funcionando (error FK esperado con UUID de prueba)');
      } else if (insertError.code === '42501') {
        console.log('‚ùå Pol√≠ticas RLS a√∫n bloqueando INSERT:', insertError.message);
      } else {
        console.log('‚ö†Ô∏è  Error inesperado en INSERT:', insertError.message);
      }
    } else {
      console.log('‚úÖ INSERT funcionando (limpiando registro de prueba...)');
      await supabase.from('online_users').delete().eq('user_id', testUserId);
    }
    
    console.log('\nüìã RESUMEN:');
    console.log('- Si ves "Pol√≠ticas RLS funcionando", las pol√≠ticas est√°n correctas');
    console.log('- Si ves "Pol√≠ticas RLS a√∫n bloqueando", necesitas aplicar el SQL manualmente');
    console.log('- El archivo SQL est√° en: sql/fix_online_users_rls_policies.sql');
    console.log('- Ejec√∫talo en el SQL Editor de Supabase Dashboard');
    
  } catch (error) {
    console.error('‚ùå Error general en la prueba:', error);
  }
}

testOnlineUsersAfterFix();